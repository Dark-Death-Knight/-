import asyncio
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackQueryHandler, ContextTypes
from collections import defaultdict
import datetime
import sqlite3
import matplotlib.pyplot as plt
import pandas as pd
from typing import Dict, List

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class TelegramBotAnalyzer:
    def __init__(self, token: str):
        self.application = Application.builder().token(token).build()
        self.user_activity = defaultdict(list)
        self.message_stats = {
            'total_messages': 0,
            'commands_used': 0,
            'text_messages': 0,
            'callback_queries': 0
        }
        self.setup_handlers()
        self.setup_database()
    
    def setup_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
        self.conn = sqlite3.connect('bot_analytics.db', check_same_thread=False)
        cursor = self.conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS user_activity (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                action_type TEXT,
                timestamp DATETIME,
                details TEXT
            )
        ''')
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS message_stats (
                date DATE PRIMARY KEY,
                total_messages INTEGER,
                unique_users INTEGER
            )
        ''')
        self.conn.commit()
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("stats", self.stats_command))
        self.application.add_handler(CommandHandler("analyze", self.analyze_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_text_message))
        self.application.add_handler(CallbackQueryHandler(self.handle_button_click))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        self.application.add_error_handler(self.error_handler)
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        self.log_activity(update.effective_user.id, 'command', '/start')
        self.message_stats['commands_used'] += 1
        
        keyboard = [
            [InlineKeyboardButton("–ü–æ–º–æ—â—å", callback_data="help")],
            [InlineKeyboardButton("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")],
            [InlineKeyboardButton("–ê–Ω–∞–ª–∏–∑", callback_data="analyze")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç-–∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä!\n\n"
            "–Ø –º–æ–≥—É –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.",
            reply_markup=reply_markup
        )
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        self.log_activity(update.effective_user.id, 'command', '/help')
        self.message_stats['commands_used'] += 1
        
        help_text = """
        üìä **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
        
        /start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
        /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
        /stats - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞
        /analyze - –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        
        **–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:**
        - –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        - –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        - –ê–Ω–∞–ª–∏–∑ –ø–æ–≤–µ–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        """
        
        await update.message.reply_text(help_text)
    
    async def stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats"""
        self.log_activity(update.effective_user.id, 'command', '/stats')
        self.message_stats['commands_used'] += 1
        
        stats_text = self.get_bot_stats()
        await update.message.reply_text(stats_text)
    
    async def analyze_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /analyze"""
        self.log_activity(update.effective_user.id, 'command', '/analyze')
        self.message_stats['commands_used'] += 1
        
        # –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
        await self.create_visualizations()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–Ω–∞–ª–∏–∑
        analysis_text = self.get_detailed_analysis()
        await update.message.reply_text(analysis_text)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫–∏
        with open('user_activity.png', 'rb') as photo:
            await update.message.reply_photo(photo, caption="üìà –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
        with open('message_distribution.png', 'rb') as photo:
            await update.message.reply_photo(photo, caption="üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π")
    
    async def handle_text_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user_id = update.effective_user.id
        message_text = update.message.text
        
        self.log_activity(user_id, 'text_message', message_text[:50])
        self.message_stats['text_messages'] += 1
        self.message_stats['total_messages'] += 1
        
        # –ü—Ä–æ—Å—Ç–æ–π —ç—Ö–æ-–æ—Ç–≤–µ—Ç —Å –∞–Ω–∞–ª–∏–∑–æ–º
        response = f"üìù –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {len(message_text)} —Å–∏–º–≤–æ–ª–æ–≤\n"
        response += f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}\n"
        response += f"üìä –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {self.message_stats['total_messages']}"
        
        await update.message.reply_text(response)
    
    async def handle_button_click(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline-–∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        self.log_activity(update.effective_user.id, 'callback', query.data)
        self.message_stats['callback_queries'] += 1
        
        if query.data == "help":
            await self.help_command(update, context)
        elif query.data == "stats":
            await query.edit_message_text(self.get_bot_stats())
        elif query.data == "analyze":
            await query.edit_message_text("üîç –ó–∞–ø—É—Å–∫–∞—é –∞–Ω–∞–ª–∏–∑...")
            await self.analyze_command(update, context)
    
    def log_activity(self, user_id: int, action_type: str, details: str = ""):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        timestamp = datetime.datetime.now()
        self.user_activity[user_id].append({
            'timestamp': timestamp,
            'action_type': action_type,
            'details': details
        })
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        cursor = self.conn.cursor()
        cursor.execute(
            "INSERT INTO user_activity (user_id, action_type, timestamp, details) VALUES (?, ?, ?, ?)",
            (user_id, action_type, timestamp, details)
        )
        self.conn.commit()
    
    def get_bot_stats(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ—Ç–∞"""
        total_users = len(self.user_activity)
        today = datetime.date.today()
        
        # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        today_activity = sum(1 for activities in self.user_activity.values()
                           for act in activities if act['timestamp'].date() == today)
        
        stats_text = f"""
        üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞**
        
        üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}
        üì® –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {self.message_stats['total_messages']}
        ‚ö° –ö–æ–º–∞–Ω–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {self.message_stats['commands_used']}
        üí¨ –¢–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {self.message_stats['text_messages']}
        üîò –ù–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫: {self.message_stats['callback_queries']}
        üìà –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–µ–≥–æ–¥–Ω—è: {today_activity} –¥–µ–π—Å—Ç–≤–∏–π
        """
        
        return stats_text
    
    def get_detailed_analysis(self) -> str:
        """–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        if not self.user_activity:
            return "üìä –î–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ."
        
        # –ê–Ω–∞–ª–∏–∑ —Å–∞–º—ã—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        user_activity_count = {user_id: len(activities) 
                             for user_id, activities in self.user_activity.items()}
        top_users = sorted(user_activity_count.items(), key=lambda x: x[1], reverse=True)[:5]
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫
        hour_activity = defaultdict(int)
        for activities in self.user_activity.values():
            for act in activities:
                hour_activity[act['timestamp'].hour] += 1
        
        analysis_text = "üîç **–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏**\n\n"
        analysis_text += "üèÜ **–¢–æ–ø-5 –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:**\n"
        for i, (user_id, count) in enumerate(top_users, 1):
            analysis_text += f"{i}. ID {user_id}: {count} –¥–µ–π—Å—Ç–≤–∏–π\n"
        
        analysis_text += f"\nüïí **–ü–∏–∫–æ–≤–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:** {max(hour_activity, key=hour_activity.get)}:00"
        
        return analysis_text
    
    async def create_visualizations(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        if not self.user_activity:
            return
        
        # –ì—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        user_activity_count = {user_id: len(activities) 
                             for user_id, activities in self.user_activity.items()}
        
        plt.figure(figsize=(10, 6))
        plt.bar(range(len(user_activity_count)), list(user_activity_count.values()))
        plt.title('–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
        plt.xlabel('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏')
        plt.ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–π—Å—Ç–≤–∏–π')
        plt.savefig('user_activity.png')
        plt.close()
        
        # –ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
        labels = ['–ö–æ–º–∞–Ω–¥—ã', '–¢–µ–∫—Å—Ç', 'Callback']
        sizes = [
            self.message_stats['commands_used'],
            self.message_stats['text_messages'], 
            self.message_stats['callback_queries']
        ]
        
        plt.figure(figsize=(8, 8))
        plt.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=90)
        plt.title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π')
        plt.savefig('message_distribution.png')
        plt.close()
    
    async def error_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
        logger.error(f"–û—à–∏–±–∫–∞: {context.error}")
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        print("ü§ñ –ë–æ—Ç-–∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∑–∞–ø—É—â–µ–Ω...")
        self.application.run_polling()

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    # –ó–∞–º–µ–Ω–∏—Ç–µ 'YOUR_BOT_TOKEN' –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
    BOT_TOKEN = "YOUR_BOT_TOKEN_HERE"
    
    analyzer_bot = TelegramBotAnalyzer(BOT_TOKEN)
    analyzer_bot.run()
