import html
import telebot
from telebot import types
import datetime

class User:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    def __init__(self, user_id, first_name, last_name=""):
        self.user_id = user_id
        self.first_name = first_name
        self.last_name = last_name
        self.join_date = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        self.message_count = 0
    
    def increment_message_count(self):
        """–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        self.message_count += 1
    
    def to_dict(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä—è"""
        return {
            'user_id': self.user_id,
            'first_name': self.first_name,
            'last_name': self.last_name,
            'join_date': self.join_date,
            'message_count': self.message_count
        }

class UserManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    def __init__(self):
        self.users = {}
    
    def get_or_create_user(self, user_id, first_name, last_name=""):
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_id not in self.users:
            self.users[user_id] = User(user_id, first_name, last_name)
        return self.users[user_id]
    
    def get_user_stats(self, user_id):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user = self.users.get(user_id)
        return user.to_dict() if user else None

class MessageFormatter:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π"""
    
    @staticmethod
    def welcome_message(first_name):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        return f"""
üëã –ü—Ä–∏–≤–µ—Ç, {first_name}!

–Ø –º–Ω–æ–≥–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –±–æ—Ç —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏:

üìù /text - –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
üìä /stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
üïê /time - –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
üå§ /weather - –ü–æ–≥–æ–¥–∞
üé≤ /random - –°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ

–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ!
"""
    
    @staticmethod
    def help_message():
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–æ—â–∏"""
        return """
<b>üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>

<code>/start</code> - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
<code>/help</code> - –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
<code>/text</code> - HTML —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
<code>/stats</code> - –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
<code>/time</code> - –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
<code>/weather</code> - –ü–æ–≥–æ–¥–∞ –≤ –ú–æ—Å–∫–≤–µ
<code>/random</code> - –°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ
<code>/inline</code> - Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞

<em>–¢–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ - —è –µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞—é!</em>
"""
    
    @staticmethod
    def text_formatting_examples():
        """–ü—Ä–∏–º–µ—Ä—ã HTML —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        return """
<b>üñã –ü—Ä–∏–º–µ—Ä—ã HTML —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:</b>

<b>–ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç</b> - <code>&lt;b&gt;—Ç–µ–∫—Å—Ç&lt;/b&gt;</code>
<em>–ö—É—Ä—Å–∏–≤</em> - <code>&lt;em&gt;—Ç–µ–∫—Å—Ç&lt;/em&gt;</code>
<u>–ü–æ–¥—á–µ—Ä–∫–Ω—É—Ç—ã–π</u> - <code>&lt;u&gt;—Ç–µ–∫—Å—Ç&lt;/u&gt;</code>
<s>–ó–∞—á–µ—Ä–∫–Ω—É—Ç—ã–π</s> - <code>&lt;s&gt;—Ç–µ–∫—Å—Ç&lt;/s&gt;</code>
<code>–ú–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω—ã–π</code> - <code>&lt;code&gt;—Ç–µ–∫—Å—Ç&lt;/code&gt;</code>
<a href="https://telegram.org">–°—Å—ã–ª–∫–∞</a> - <code>&lt;a href="URL"&gt;—Ç–µ–∫—Å—Ç&lt;/a&gt;</code>
"""
    
    @staticmethod
    def stats_message(user_data):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_data:
            return f"""
<b>üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>

üë§ –ò–º—è: {user_data['first_name']}
üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user_data['join_date']}
üì® –°–æ–æ–±—â–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {user_data['message_count']}
üÜî –í–∞—à ID: <code>{user_data['user_id']}</code>
"""
        return "‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start"
    
    @staticmethod
    def time_message():
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—Ä–µ–º–µ–Ω–∏"""
        return f"""
<b>üïê –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è:</b>

üìÖ –î–∞—Ç–∞: <code>{datetime.datetime.now().strftime('%d.%m.%Y')}</code>
‚è∞ –í—Ä–µ–º—è: <code>{datetime.datetime.now().strftime('%H:%M:%S')}</code>
üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: –ú–°–ö (UTC+3)
"""
    
    @staticmethod
    def weather_message():
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–≥–æ–¥–µ"""
        return """
<b>üå§ –ü–æ–≥–æ–¥–∞ –≤ –ú–æ—Å–∫–≤–µ:</b>

üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: +5¬∞C
üí® –í–µ—Ç–µ—Ä: 3 –º/—Å
üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: 75%
‚òÅÔ∏è –û–±–ª–∞—á–Ω–æ—Å—Ç—å: –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è
üìã –û–ø–∏—Å–∞–Ω–∏–µ: –õ–µ–≥–∫–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å

<em>–û–±–Ω–æ–≤–ª–µ–Ω–æ: —Å–µ–π—á–∞—Å</em>
"""
    
    @staticmethod
    def random_message(number):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ª—É—á–∞–π–Ω—ã–º —á–∏—Å–ª–æ–º"""
        return f"""
<b>üé≤ –°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ:</b>

–í–∞—à–µ —á–∏—Å–ª–æ: <code>{number}</code>
–î–∏–∞–ø–∞–∑–æ–Ω: 1-100

<em>–•–æ—Ç–∏—Ç–µ –µ—â–µ? –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É —Å–Ω–æ–≤–∞!</em>
"""
    
    @staticmethod
    def info_message():
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        return """
<b>‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:</b>

–≠—Ç–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π Telegram –±–æ—Ç
—Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –∏ –∫–æ–º–∞–Ω–¥–∞–º–∏.

–†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω –Ω–∞ Python —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º
–±–∏–±–ª–∏–æ—Ç–µ–∫–∏ pyTelegramBotAPI.

üîß –§—É–Ω–∫—Ü–∏–∏:
‚Ä¢ HTML —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚Ä¢ Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ callback'–æ–≤
"""
    
    @staticmethod
    def echo_message(text, first_name):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —ç—Ö–æ-–æ—Ç–≤–µ—Ç"""
        return f"""
<b>üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:</b>

<code>{html.escape(text)}</code>

üìä –î–ª–∏–Ω–∞: {len(text)} —Å–∏–º–≤–æ–ª–æ–≤
üë§ –û—Ç: {first_name}
"""

class KeyboardManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞–º–∏"""
    
    @staticmethod
    def create_reply_keyboard():
        """–°–æ–∑–¥–∞–µ—Ç reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"""
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        buttons = [
            types.KeyboardButton('üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'),
            types.KeyboardButton('üÜò –ü–æ–º–æ—â—å'),
            types.KeyboardButton('üåê –°–∞–π—Ç')
        ]
        markup.add(*buttons)
        return markup
    
    @staticmethod
    def create_inline_keyboard():
        """–°–æ–∑–¥–∞–µ—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"""
        markup = types.InlineKeyboardMarkup()
        buttons = [
            types.InlineKeyboardButton('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data='stats'),
            types.InlineKeyboardButton('üïê –í—Ä–µ–º—è', callback_data='time'),
            types.InlineKeyboardButton('üé≤ –°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ', callback_data='random'),
            types.InlineKeyboardButton('üåê –°–∞–π—Ç', url='https://telegram.org')
        ]
        markup.row(buttons[0], buttons[1])
        markup.row(buttons[2], buttons[3])
        return markup
    
    @staticmethod
    def create_website_keyboard():
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–∞–π—Ç–∞"""
        markup = types.InlineKeyboardMarkup()
        button = types.InlineKeyboardButton('–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç Telegram', url='https://telegram.org')
        markup.add(button)
        return markup

class CommandHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥"""
    
    def __init__(self, bot, user_manager, formatter, keyboard_manager):
        self.bot = bot
        self.user_manager = user_manager
        self.formatter = formatter
        self.keyboard_manager = keyboard_manager
        self.setup_handlers()
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥"""
        @self.bot.message_handler(commands=['start'])
        def start(message):
            self.handle_start(message)
        
        @self.bot.message_handler(commands=['help'])
        def help_command(message):
            self.handle_help(message)
        
        @self.bot.message_handler(commands=['text'])
        def text_formatting(message):
            self.handle_text_formatting(message)
        
        @self.bot.message_handler(commands=['stats'])
        def stats(message):
            self.handle_stats(message)
        
        @self.bot.message_handler(commands=['time'])
        def current_time(message):
            self.handle_time(message)
        
        @self.bot.message_handler(commands=['weather'])
        def weather(message):
            self.handle_weather(message)
        
        @self.bot.message_handler(commands=['random'])
        def random_number(message):
            self.handle_random(message)
        
        @self.bot.message_handler(commands=['inline'])
        def inline_keyboard(message):
            self.handle_inline(message)
    
    def handle_start(self, message):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start"""
        user = self.user_manager.get_or_create_user(
            message.from_user.id,
            message.from_user.first_name,
            message.from_user.last_name
        )
        
        markup = self.keyboard_manager.create_reply_keyboard()
        welcome_text = self.formatter.welcome_message(message.from_user.first_name)
        
        self.bot.send_message(message.chat.id, welcome_text, 
                            reply_markup=markup, parse_mode='HTML')
    
    def handle_help(self, message):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /help"""
        user = self.user_manager.get_or_create_user(
            message.from_user.id,
            message.from_user.first_name
        )
        user.increment_message_count()
        
        help_text = self.formatter.help_message()
        self.bot.send_message(message.chat.id, help_text, parse_mode='HTML')
    
    def handle_text_formatting(self, message):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /text"""
        user = self.user_manager.get_or_create_user(
            message.from_user.id,
            message.from_user.first_name
        )
        user.increment_message_count()
        
        formatting_text = self.formatter.text_formatting_examples()
        self.bot.send_message(message.chat.id, formatting_text, parse_mode='HTML')
    
    def handle_stats(self, message):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /stats"""
        user = self.user_manager.get_or_create_user(
            message.from_user.id,
            message.from_user.first_name
        )
        user.increment_message_count()
        
        user_data = self.user_manager.get_user_stats(message.from_user.id)
        stats_text = self.formatter.stats_message(user_data)
        self.bot.send_message(message.chat.id, stats_text, parse_mode='HTML')
    
    def handle_time(self, message):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /time"""
        user = self.user_manager.get_or_create_user(
            message.from_user.id,
            message.from_user.first_name
        )
        user.increment_message_count()
        
        time_text = self.formatter.time_message()
        self.bot.send_message(message.chat.id, time_text, parse_mode='HTML')
    
    def handle_weather(self, message):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /weather"""
        user = self.user_manager.get_or_create_user(
            message.from_user.id,
            message.from_user.first_name
        )
        user.increment_message_count()
        
        try:
            weather_text = self.formatter.weather_message()
            self.bot.send_message(message.chat.id, weather_text, parse_mode='HTML')
        except Exception:
            self.bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã")
    
    def handle_random(self, message):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /random"""
        user = self.user_manager.get_or_create_user(
            message.from_user.id,
            message.from_user.first_name
        )
        user.increment_message_count()
        
        import random
        number = random.randint(1, 100)
        random_text = self.formatter.random_message(number)
        self.bot.send_message(message.chat.id, random_text, parse_mode='HTML')
    
    def handle_inline(self, message):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /inline"""
        user = self.user_manager.get_or_create_user(
            message.from_user.id,
            message.from_user.first_name
        )
        user.increment_message_count()
        
        markup = self.keyboard_manager.create_inline_keyboard()
        self.bot.send_message(message.chat.id, "üîò –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

class MessageHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    
    def __init__(self, bot, user_manager, formatter, keyboard_manager, command_handler):
        self.bot = bot
        self.user_manager = user_manager
        self.formatter = formatter
        self.keyboard_manager = keyboard_manager
        self.command_handler = command_handler
        self.setup_handlers()
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        @self.bot.message_handler(content_types=['text'])
        def handle_text(message):
            self.handle_text_message(message)
        
        @self.bot.message_handler(content_types=['photo', 'document', 'sticker'])
        def handle_media(message):
            self.handle_media_message(message)
    
    def handle_text_message(self, message):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        user = self.user_manager.get_or_create_user(
            message.from_user.id,
            message.from_user.first_name,
            message.from_user.last_name
        )
        user.increment_message_count()
        
        if message.text == 'üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è':
            info_text = self.formatter.info_message()
            self.bot.send_message(message.chat.id, info_text, parse_mode='HTML')
        
        elif message.text == 'üÜò –ü–æ–º–æ—â—å':
            self.command_handler.handle_help(message)
        
        elif message.text == 'üåê –°–∞–π—Ç':
            markup = self.keyboard_manager.create_website_keyboard()
            self.bot.send_message(message.chat.id, "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞:", reply_markup=markup)
        
        else:
            response = self.formatter.echo_message(message.text, message.from_user.first_name)
            self.bot.send_message(message.chat.id, response, parse_mode='HTML')
    
    def handle_media_message(self, message):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –º–µ–¥–∏–∞-—Å–æ–æ–±—â–µ–Ω–∏—è"""
        user = self.user_manager.get_or_create_user(
            message.from_user.id,
            message.from_user.first_name
        )
        user.increment_message_count()
        
        self.bot.send_message(message.chat.id, f"üìé –ü–æ–ª—É—á–µ–Ω –º–µ–¥–∏–∞-—Ñ–∞–π–ª! –¢–∏–ø: {message.content_type}")

class CallbackHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤"""
    
    def __init__(self, bot, user_manager):
        self.bot = bot
        self.user_manager = user_manager
        self.setup_handler()
    
    def setup_handler(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback'–æ–≤"""
        @self.bot.callback_query_handler(func=lambda call: True)
        def callback_handler(call):
            self.handle_callback(call)
    
    def handle_callback(self, call):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –∑–∞–ø—Ä–æ—Å—ã"""
        if call.data == 'stats':
            self._handle_stats_callback(call)
        elif call.data == 'time':
            self._handle_time_callback(call)
        elif call.data == 'random':
            self._handle_random_callback(call)
    
    def _handle_stats_callback(self, call):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        user_data = self.user_manager.get_user_stats(call.from_user.id)
        if user_data:
            count = user_data['message_count']
            self.bot.answer_callback_query(call.id, f"–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ {count} —Å–æ–æ–±—â–µ–Ω–∏–π")
        else:
            self.bot.answer_callback_query(call.id, "–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    def _handle_time_callback(self, call):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –≤—Ä–µ–º–µ–Ω–∏"""
        current_time = datetime.datetime.now().strftime("%H:%M:%S")
        self.bot.answer_callback_query(call.id, f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {current_time}")
    
    def _handle_random_callback(self, call):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback —Å–ª—É—á–∞–π–Ω–æ–≥–æ —á–∏—Å–ª–∞"""
        import random
        number = random.randint(1, 100)
        self.bot.answer_callback_query(call.id, f"–°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ: {number}")

class TelegramBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å Telegram –±–æ—Ç–∞"""
    
    def __init__(self, token):
        self.bot = telebot.TeleBot(token)
        self.user_manager = UserManager()
        self.formatter = MessageFormatter()
        self.keyboard_manager = KeyboardManager()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        self.command_handler = CommandHandler(
            self.bot, self.user_manager, self.formatter, self.keyboard_manager
        )
        
        self.callback_handler = CallbackHandler(self.bot, self.user_manager)
        
        self.message_handler = MessageHandler(
            self.bot, self.user_manager, self.formatter, 
            self.keyboard_manager, self.command_handler
        )
    
    def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞"""
        print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
        try:
            self.bot.polling(none_stop=True)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞: {e}")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    bot = TelegramBot('8038191080:AAEH1x4Jh1JQPKVjztrhGtOfw1btElAxlKA')
    bot.run()
